[{"content":"最小費用流問題(Minimum Cost Flow Problem) $N$ を頂点の集合，$A$ を辺の集合，$c_{ij}$ を辺 $(i, j)$ の単位流量あたりのコスト，$x_{ij}$ を辺 $(i, j)$ の流量，$b_i$ を頂点 i の需要/供給量，$l$ を辺の下限容量，$u$ を辺の上限容量としたとき，最小費用流問題（以下 MCFP）は以下のように定式化されます．\n1 つめの制約を流量保存則と呼び，第一項は頂点 i から出る流量，第二項は頂点 i に入る流量を表します． 2 つめの制約を容量制約と呼びます．\n$$ \\begin{aligned} \u0026\\text{minimize} \u0026\u0026 \\sum_{(i, j) \\in A} c_{ij} x_{ij} \\\\ \u0026\\text{subject to} \u0026\u0026 \\sum_{j:(i, j) \\in A} x_{ij} - \\sum_{j:(j,i) \\in A} x_{ji} = b_i \u0026\u0026 \\forall i \\in N \\\\ \u0026 \u0026\u0026 l_{ij} \\le x_{ij} \\leq u_{ij} \u0026\u0026 \\forall (i, j) \\in A \\end{aligned} $$以下ではコスト，流量，需要/供給，下限容量，上限容量はすべて整数とします．また，$\\sum_{i \\in N} b_i = 0$，コストを非負，下限容量を 0 とします．\n用語・定義 pseudoflow\n容量制約を満たす flow を pseudoflow と呼びます．流量保存則には違反していてもかまいません． 残余容量\n$r_{ij} = u_{ij} - x_{ij}$ を辺 (i, j) の残余容量と呼びます． imbalance\npseudoflow x に対し，頂点 i の imbalance を次のように定義します．\n$e(i) = b(i) + \\sum_{j:(j, i) \\in A} x_{ji} - \\sum_{j:(i,j) \\in A} x_{ij}$ reduced cost\n各頂点のポテンシャル $\\pi$ が与えられたとき，$c_{ij}^{\\pi} = c_{ij} - \\pi(i) + \\pi(j)$ を辺 (i, j) の reduced cost と呼びます． Reduced Cost 最適性 最小費用流問題の実行可能な flow $x$ が最適であるための必要十分条件は，残余ネットワークのすべての辺 (i, j) に対して$c^{\\pi}_{ij} \\ge 0$ となるポテンシャル $\\pi$ が存在することです．\n最短路繰り返し法(Successive Shortest Path Algorithm) 最短路繰り返し法は容量制約を満たすが流量保存則に違反する pseudoflow x から開始します．\nアルゴリズムの各ステップでは reduced cost 最適性を維持しつつ，主問題の実行不能解 x を実行可能解に近づけます．\n具体的には，残余ネットワーク上で$e(k) \\gt 0$ である頂点 k から $e(l) \\lt 0$ である頂点 l へ，最短路に沿って flow を流すことで実行可能性を高めていきます．\n実行可能解が得られたときアルゴリズムは終了します．\n最短路繰り返し法の流れは以下のようになります\n初期解の構築 $x = 0$，$\\pi = 0$ とする 実行可能解が得られるまで以下を繰り返す reduced cost を距離とする残余ネットワーク上で，$e(k) \\gt 0$ である頂点 k から各頂点への最短路を求める $P$ を k から各頂点への最短路，$d$ を最短距離とする ポテンシャルの更新 $\\pi^{\\prime} = \\pi - d$ flow と imbalance の更新 $\\delta = min[e(k), min(r_{ij} : (i,j) \\in P)]$とし，$P$ に沿って辺の flow を $\\delta$ 増加する $e(k) = e(k) - \\delta$，$e(l) = e(l) + \\delta$ と更新する 次節からアルゴリズムの各ステップで常に reduced cost 最適性を維持することを確認していきます．\n初期解の構築 初期解が容量制約と reduced cost 最適性を満たすことを確認します．\n仮定より，下限容量は 0 のため $x = 0$ は容量制約を満たします．\n$\\pi = 0$ のため $c_{ij}^{\\pi} = c_{ij}$ です．辺のコストはすべて非負を仮定しているため $c_{ij}^{\\pi} \\ge 0$ となり reduced cost 最適性を満たします．\nポテンシャルの更新 ある $x$ に対し $\\pi$ が reduced cost 最適性を満たしているとき，ポテンシャルを $\\pi^{\\prime} = \\pi - d$ と更新しても reduced cost 最適性を満たすことを示します1．\n$d$ は reduced cost を距離とした残余ネットワーク上での頂点 k から各頂点への最短距離であるため，各辺 (i, j) は $d(j) \\le d(i) + c_{ij}^{\\pi}$ を満たします．\n上の式に $c_{ij}^{\\pi} = c_{ij} - \\pi(i) + \\pi(j)$ を代入します．\n$d(j) \\le d(i) + c_{ij} - \\pi(i) + \\pi(j)$\n$d(j)$を移項し，頂点ごとにまとめます．\n$c_{ij} - (\\pi(i) - d(i)) + (\\pi(j) - d(j)) \\ge 0$\nポテンシャルの更新の仕方から以下が成り立ちます．\n$c_{ij} - \\pi^{\\prime}(i) + \\pi^{\\prime}(j) = c^{\\pi_{ij}^{\\prime}} \\ge 0$\nよって，ポテンシャルを $\\pi^{\\prime} = \\pi - d$ と更新しても reduced cost 最適性を満たすことがわかりました．\nflow の更新 最短路に沿って flow を更新したとき reduced cost 最適性を満たすことを確認します．\nまず，ポテンシャルを $\\pi^{\\prime} = \\pi - d$ と更新したとき，頂点 k から各頂点への最短路の辺の reduced cost が 0 となることを確認します．\n頂点 k から頂点 l の最短路を考えます．最短路であるため，この経路の各辺は $d(j) = d(i) + c_{ij}^{\\pi}$ を満たします．\n上の式に $c_{ij}^{\\pi} = c_{ij} - \\pi(i) + \\pi(j)$ を代入します．\n$d(j) = d(i) + c_{ij} - \\pi(i) + \\pi(j)$\n$d(j)$ を移項し，頂点ごとにまとめます．\n$c_{ij} - (\\pi(i) - d(i)) + (\\pi(j) - d(j)) = 0$\nポテンシャルの更新の仕方から以下が成り立ちます．\n$c_{ij} - \\pi^{\\prime}(i) + \\pi^{\\prime}(j) = c^{\\pi_{ij}^{\\prime}} = 0$\nよって，頂点 k から各頂点への最短路の辺の reduced cost は 0 となることがわかりました．\n次に，flow を更新したとき reduced cost 最適性を満たすことを確認します．\n$\\delta = min[e(s), min(r_{ij} : (i,j) \\in P)]$ とし，最短路に沿って辺の flow を更新します．\n$\\delta$ 選び方から，このように flow を更新しても容量制約を満たします．また，reduced cost が 0 であるため，辺に flow を流すことで残余ネットワーク上に逆辺が生じたとしても reduced cost 最適性には違反しません．\nよって，最短路に沿って flow を更新したとき reduced cost 最適性を満たすことがわかりました．\n計算量 $U$ を最大の供給量，$C$ をコストの最大値とします．\nアルゴリズムは各イテレーションで最短路問題を解き，供給量は厳密に減少します． よって，$nU$ 回のイテレーションでアルゴリズムは終了します．最短路問題に 2 分ヒープを使った dijkstra 法を使うとすると $O((m + n) \\log n)$ となります．\nよって，全体で $O(nU (m + n) \\log n)$ となります．\n補足：ポテンシャルの更新の改善 dijkstra 法で最短距離を求めているとします．\n上記のアルゴリズムの説明では頂点 k からすべての頂点に対する最短路を求めましたが，$e(l) \\lt 0$ のような頂点を見つけたとき探索を終了したとします．最短距離が確定した頂点を permanently labeled node，まだ確定していない頂点を temporarily labeled node と呼びます．\nこのとき，ポテンシャルは以下のように更新することができます．\n$$ \\pi^{\\prime} = \\left\\{ \\begin{array}{ll} \\pi_{i} - d_{i} \u0026 \\text{node i is permanently labeled}\\\\ \\pi_{i} - d_{l} \u0026 \\text{node i is temporarily labeled} \\end{array} \\right. $$ 証明 $S$ を permanently labeled node の集合，$\\bar{S}$ を temporarily labeled node の集合とします． 頂点 i と頂点 j が S と T のどちらに属するかの 4 つ場合について，ポテンシャルが $\\pi$ から $\\pi^{\\prime}$ に変更されたときを考えます． 1. $i \\in S, j \\in S$ の場合 「ポテンシャルの更新」の節と同じです．\n2. $i \\in S, j \\in \\bar{S}$ の場合 $c^{\\pi^{\\prime}} = c_{ij}^{\\pi} + d(i) - d(l)$ と更新されます．\n頂点 j は最短距離と確定していないため，$d(l) \\le d(j)$ です．\nまた，頂点 i は最短距離と確定しているため，dijkstra 法のアルゴリズムから $d(j) \\le d(i) + c_{ij}^{\\pi}$ が成り立ちます．\nよって，$d(l) \\le d(i) + c_{ij}^{\\pi}$ であるため $c_{ij}^{\\pi^{\\prime}} \\ge 0$ を満たします．\n3. $i \\in \\bar{S}, j \\in S$ の場合 $c^{\\pi^{\\prime}} = c_{ij}^{\\pi} + d(l) - d(j)$ と更新されます．\n頂点 j は最短距離と確定しているため，$d(j) \\le d(l)$ です．\nよって，$c_{ij}^{\\pi^{\\prime}} \\ge 0$ を満たします．\n4. $i \\in \\bar{S}, j \\in \\bar{S}$ の場合 $c^{\\pi^{\\prime}} = c_{ij}^{\\pi} + d(l) - d(l)$ と更新されます．\nよって，$c_{ij}^{\\pi} \\ge 0$ を満たします．\nまた，すべてのポテンシャルに定数を加算しても reduced cost 最適性に影響はないため，全体に $d(l)$ を加算することで以下のように更新することもできます．\n$$ \\pi^{\\prime} = \\left\\{ \\begin{array}{ll} \\pi_{i} - d_{i} + d_{l} \u0026 \\text{node i is permanently labeled}\\\\ \\pi_{i} \u0026 \\text{node i is temporarily labeled} \\end{array} \\right. $$参考 Network Flows: Pearson New International Edition すべての頂点の距離が定まることを仮定しています．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-10-21T00:00:00+09:00","permalink":"https://miti-7.github.io/post/%E6%9C%80%E5%B0%8F%E8%B2%BB%E7%94%A8%E6%B5%81%E5%95%8F%E9%A1%8C%E3%81%AE%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97%E6%B3%95/","title":"最小費用流問題の最短路繰り返し法"},{"content":"最短路問題 有向グラフが与えられたとき，始点 s から各頂点への最短路を求める問題を単一始点最短路問題といいます．以下では，頂点数を $n$，辺数を $m$，各辺 (u, v) のコストを $c_{uv}$ で表します．また，グラフは強連結を仮定します．\n最短路問題の最適性条件 頂点集合を $N$，辺集合を $A$，辺 (u, v) のコストを $c_{uv}$ とします．始点 s から各頂点 v への有向パスの距離の上界を $d(v)$ で表し，これを距離ラベルと呼びます．特に，$d(s) = 0$ です．各頂点 $v \\in N$ について，$d(v)$ が始点 s から頂点 v の最短路の長さであるための必要十分条件は以下が成り立つことです．\n$$ \\begin{equation} d(v) \\le d(u) + c_{uv} \\quad \\forall (u, v) \\in A \\end{equation} $$不等式 (1) は，各辺 $(u, v) \\in A$ について，頂点 v への距離は頂点 u への距離 + $c_{uv}$ 以下であることを表しています．\n証明 まず，必要条件であることを示します．\n対偶をとり，$d(v) \\gt d(u) + c_{uv}$ ならば，距離ラベルが最短路の長さではないことを示します．\n$d(v) \\gt d(u) + c_{uv}$ であるような辺があれば，頂点 u を経由することで頂点 v への距離を改善することができます．\nしたがって，距離ラベル $d$ は最短路の長さではありません．\n次に，十分条件であることを示します．\n頂点 s から頂点 v への任意の有向パスが $s = i_1 \\rightarrow i_2 \\rightarrow \u0026hellip; \\rightarrow i_{k-1} \\rightarrow i_k = v$ であったとします．\n不等式 (1) から以下の式がそれぞれ成り立ちます．\n$$ \\begin{aligned} d(v) =\\; \u0026 d(i_k) \u0026\u0026 \\le\\; d(i_{k - 1}) \u0026\u0026 +\\; c_{i_{k - 1}i_{k}}, \\\\ \u0026 d(i_{k - 1}) \u0026\u0026 \\le\\; d(i_{k - 2}) \u0026\u0026 +\\; c_{i_{k - 2} i_{k - 1}}, \\\\ \u0026 \\vdots \\\\ \u0026 d(i_{2}) \u0026\u0026 \\le\\; d(i_{1}) \u0026\u0026 +\\; c_{i_{1}i_{2}} = c_{i_{1}i_{2}}. \\end{aligned} $$式をそれぞれ代入すると\n$$ d(v) = d(i_{k}) \\le c_{i_{k-1}i_{k}} + c_{i_{k-2}i_{k-1}} + \\dots + c_{i_{1}i_{2}} = \\sum_{(u, v) \\in P} c_{uv} $$となり，$d(v)$ は，始点 s から頂点 v への任意の有向パスのコストの合計の下界になります． $d(v)$ は始点 s から頂点 v への任意の有向パスの下界かつ上界なので，距離ラベル $d(v)$ は最短路の長さです．\n以上のことから，「各頂点 $v \\in N$ について距離ラベル $d(v)$ が最短路の長さである」の必要十分条件は，「各辺 $(u, v) \\in A$ について $d(v) \\le d(u) + c_{uv}$ を満たす」であることがわかりました．\nreduced arc length の性質 ある距離ラベル $d$ に対し，$c_{uv}^{d} = c_{uv} + d(u) - d(v)$ を reduced arc length と呼びます．reduced arc length には次の性質があります．\n任意の閉路 $W$ について，$\\sum_{(u, v) \\in W} c_{uv}^{d} = \\sum_{(u, v) \\in W} c_{uv}$ 頂点 k から頂点 l への任意の有向パス $P$ について，$\\sum_{(u, v) \\in P} c_{uv}^{d} = \\sum_{(u, v) \\in P} c_{uv} + d(k) - d(l)$ 距離ラベル $d$ が最適ならば，すべての辺 (u, v) について $c_{uv}^{d} \\ge 0$ が成り立つ 性質 1 の証明 $$ \\begin{aligned} \\sum_{(u, v) \\in W} c_{uv}^{d} \u0026= \\sum_{(u, v) \\in W} (c_{uv} + d(u) - d(v)) \\\\ \u0026= \\sum_{(u, v) \\in W} c_{uv} + \\sum_{(u, v) \\in W} (d(u) - d(v)) \\\\ \u0026= \\sum_{(u, v) \\in W} c_{uv} \\\\ \\end{aligned} $$任意の有向閉路 $W$ において，頂点 u は $+d(u)$としてちょうど 1 回，$-d(u)$ としてちょうど 1 回出現するため，$\\sum_{(u, v) \\in W} (d(u) - d(v)) = 0$ が成り立ちます．\n性質 2 の証明 $$ \\begin{aligned} \\sum_{(u, v) \\in P} c_{uv}^{d} \u0026= \\sum_{(u, v) \\in P} (c_{uv} + d(u) - d(v)) \\\\ \u0026= \\sum_{(u, v) \\in P} c_{uv} + \\sum_{(u, v) \\in P} (d(u) - d(v)) \\\\ \u0026= \\sum_{(u, v) \\in P} c_{uv} + d(k) - d(l) \\\\ \\end{aligned} $$頂点 k と頂点 l 以外の頂点は，$+d(u)$ としてちょうど 1 回，$-d(u)$ としてちょうど 1 回出現するため互いに打ち消し合います．\n頂点 k は $+d(k)$ として，頂点 $l$ は $-d(l)$ としてちょうど 1 回出現します．\n性質 3 の証明 最適性条件から直ちに言えます 次節からは，reduced arc length の性質を使ったアルゴリズムと問題を見ていきます．\nJohnson\u0026rsquo;s algorithm 任意の 2 頂点の組 (u, v) に対して頂点 u から頂点 v の最短路を求める問題を全点対最短路問題と呼びます．\nJohnson\u0026rsquo;s algorithm は全点対最短路問題を解くアルゴリズムです．\n頂点数が $n$ のとき，単一始点最短路問題を n 回解くことによって全点対最短路を求めることができます．\nただし，グラフにコストが負の辺があると，単一始点最路問題を解くのに Dijkstra 法を使うことができません．そこで，グラフのコストを reduced arc length に変換したグラフ上で最短路を求めることにします．reduced arc length の性質 3 から，最適距離ラベル $d$ に対する reduced arc length のコストはすべて 0 以上であるため Dijkstra 法を使うことができます．\n変換したグラフ上で最短距離を求めたあと，性質 2 を使って元のグラフの距離に変換します．\n最適距離ラベルは Bellman–Ford 法を使い求めることができます．負閉路が見つかった場合はアルゴリズムを終了します．\nDijkstra 法に二分ヒープを使うとき，Bellman–Ford 法に $O(nm)$，Dijkstra 法に $O((n + m) \\log n)$ かかるため，計算量は全体として $O(nm + n ((n + m) \\log n))$ となります．\n例として，AOJ - All Pairs Shortest Path を解きます．\n与えられるグラフは強連結ではないため，人工頂点 s を追加し，s から他のすべての頂点に重さ 0 の辺を張ります．この s を始点として Bellman-Ford 法を使うことで最適距離ラベルを求めることができます．\n実装では人工頂点を追加するのではなく， Bellman-Ford の初期解をすべて 0 とすることで対応しています．\n提出コード\nABC237 E - Skiing 問題概要\n$N$ 頂点，$M$ 辺の強連結の有向グラフと各頂点 u の高さ $H(u)$ が与えられる．$H(u) \\ge H(v)$ としたとき，頂点 u から頂点 v にはコスト $H(v) - H(u)$ の辺が，頂点 v から頂点 u にはコスト $2(H(u) - H(v))$ の辺が張られている．頂点 1 から各頂点への最短距離の中で最も小さいものを求めよ．\n負辺のあるグラフの最短路問題なので Bellman–Ford 法を使えば答えが求まりますが，Bellman–Ford 法の計算量は $O(nm)$ なので TLE になってしまいます． そこで，グラフのコストを reduced arc length に変換したグラフ上で最短路を求めることにします．\nまず，不等式 (1) を満たすような距離ラベルを考えます．\nある距離ラベル $d$ に対して，$H(u) \\ge H(v)$ のとき，$c_{uv}^{d}$ と $c_{vu}^{d}$ は以下のように表せます．\n$$ \\begin{aligned} c_{uv}^{d} \u0026= c_{uv} + d(u) - d(v) = H(v) - H(u) + d(u) - d(v) \\\\ c_{vu}^{d} \u0026= c_{vu} + d(v) - d(u) = 2(H(u)- H(v)) + d(v) - d(u) \\\\ \\end{aligned} $$u と v についてまとめて式を整理します．\n$$ \\begin{aligned} c_{uv}^{d} \u0026= (H(v) - d(v)) - (H(u) - d(u)) \\\\ c_{vu}^{d} \u0026= (2H(u) - d(u)) - (2H(v) - d(v)) \\\\ \\end{aligned} $$$c_{uv}^{d} \\ge 0$ かつ $c_{vu}^{d} \\ge 0$ にしたいので，各頂点 u について $d(u) = H(u)$ とすると以下のようになります．\n$$ \\begin{aligned} c_{uv}^{d} \u0026= (H(v) - H(v)) - (H(u) - H(u)) = 0 \\\\ c_{vu}^{d} \u0026= (2H(u) - H(u)) - (2H(v) - H(v)) = H(u) - H(v)\\\\ \\end{aligned} $$以上のことから，次のように問題を言い換えることができます．\n$N$ 頂点，$M$ 辺の強連結の有向グラフと各頂点 u の高さ $H(u)$ が与えられる．$H(u) \\ge H(v)$ のとき，頂点 u から頂点 v にはコスト 0 の辺が，頂点 v から頂点 u にはコスト $H(u) - H(v)$ の辺が張られている．頂点 1 から各頂点への最短距離の中で最も小さいものを求めよ．\nすべての辺のコストは 0 以上なので Dijkstra 法で求めることができます．\n求まる値は変換したグラフ上での値なので，$distance[u] - H[0] + H[u]$ として元のグラフ上での値に戻します．\n提出コード\n参考 Network Flows: Pearson New International Edition Johnson\u0026rsquo;s algorithm E - Skiing 解説 ","date":"2024-09-17T00:00:00+09:00","permalink":"https://miti-7.github.io/post/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%95%8F%E9%A1%8C%E3%81%AE%E6%9C%80%E9%81%A9%E6%80%A7%E6%9D%A1%E4%BB%B6%E3%81%A8-reduced-arc-length/","title":"最短路問題の最適性条件と reduced arc length"},{"content":"hugo ではサーバーの実行中にファイルが変更されるとサイトを再構築し自動的にブラウザを更新してくれる機能があるのですが ，Frequently asked questions によると WSL で実行しているときはうまく動作しないことがあるらしいです．\nこのようなときは server を起動するときに，poll オプションを指定すると定期的にポーリングしてくれます．\n1 hugo server --poll \u0026#34;700ms\u0026#34; ","date":"2024-09-15T00:00:00+09:00","permalink":"https://miti-7.github.io/post/hugo-%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%A4%89%E6%9B%B4%E3%81%8C%E6%A4%9C%E5%87%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6/","title":"HUGO でファイル変更が検出されないときの対処"},{"content":"最小費用流問題(Minimum Cost Flow Problem) $N$ を頂点の集合，$A$ を辺の集合，$c_{ij}$ を辺 $(i, j)$ の単位流量あたりのコスト，$x_{ij}$ を辺 $(i, j)$ の流量，$b_i$ を頂点 i の需要/供給量，$l$ を辺の下限容量，$u$ を辺の上限容量としたとき，最小費用流問題（以下 MCFP）は以下のように定式化されます．\n1 つめの制約を流量保存則と呼び，第一項は頂点 i から出る流量，第二項は頂点 i に入る流量を表します． 2 つめの制約を容量制約と呼びます．\n$$ \\begin{aligned} \u0026\\text{minimize} \u0026\u0026 \\sum_{(i, j) \\in A} c_{ij} x_{ij} \\\\ \u0026\\text{subject to} \u0026\u0026 \\sum_{j:(i, j) \\in A} x_{ij} - \\sum_{j:(j,i) \\in A} x_{ji} = b_i \u0026\u0026 \\forall i \\in N \\\\ \u0026 \u0026\u0026 l_{ij} \\le x_{ij} \\leq u_{ij} \u0026\u0026 \\forall (i, j) \\in A \\end{aligned} $$以下ではコスト，流量，需要/供給，下限容量，上限容量はすべて整数とします．また，$\\sum_{i \\in N} b_i = 0$ を仮定します．\nPrimal Network Simplex 法 primal network simplex 法は，ネットワーク構造を利用することで simplex 法を効率化させたアルゴリズムです．今回は primal network simplex 法で MCFP を解いていきます．\nMCFP が必ず 最適 spanning tree solution という解を持つことを利用し，spanning tree solution のみを探索することで効率的に最適解を見つけることができます1．\nprimal network simplex 法は，simplex 法の観点と負閉路除去法の観点から説明することができますが，今回は負閉路除去法の観点で説明します． 節 1 で spanning tree solution の定義をします．節 2 で spanning tree solution は spanning tree structure として表せることと，spanning tree structure が最適解となる条件について示します．節 3 で primal network simplex 法の流れについて説明し，節 4 から 節 8 でアルゴリズムの各段階の詳細について述べます．節 9 から節 11 で退化について説明します．\n1. spanning tree solution ある実行可能解 $x$ に対して， $l_{ij} \u0026lt; x_{ij} \u0026lt; u_{ij}$ を満たす辺を free arc，$x_{ij} = l_{ij}$ か $x_{ij} = u_{ij}$ を満たす辺を restricted arc と呼びます． 解 $x$ とそれに関連する全域木が以下の条件を満たすとき，spanning tree solution と呼びます．特に，$x$ が 最適解であるとき最適 spanning tree solution と呼びます．\n$x$ が実行可能解である 全域木に含まれない辺（non-tree arc）がすべて restricted arc である 具体例を示します．簡単のため，辺容量の下限はすべて 0 としコストは省略します．$b(0) = 2$，$b(3) = -2$ とします．\n下の図のグラフでは辺 (0, 1)，(2, 3) が free arc，辺 (0, 2)，(1, 2)，(1, 3) が restricted arc です．\n解 $x$ は流量保存則と容量制約を満たすため実行可能解です．全域木として，青色の辺 (0, 1)，(0, 2)，(2, 3) を選ぶ2と，non-tree arc は (1, 2) と (1, 3) となり，すべて restricted arc であるため spanning tree solution となります．\nまた，全域木として，青色の辺 (0, 1)，(1, 2)，(2, 3) を選んでも spanning tree solution となります． このように，1 つの実行可能解に複数の spanning tree solution が対応することがあります．\n2. spanning tree structure と最適性条件 spanning tree solution は辺集合を次の 3 つに分割します．\nT: 全域木の辺 L: non-tree arc のうち，flow が下限の辺 U: non-tree arc のうち，flow が上限の辺 この 3 つ組 (T, L, U) を spanning tree structure と呼びます．spanning tree structure は spanning tree solution から一意に構築されます．\n頂点 i のポテンシャルを $\\pi(i)$，辺 (i, j) の reduced cost を $c_{ij}^{\\pi} = c_{ij} - \\pi(i) + \\pi(j)$ で表します．spanning tree structure が次の条件を満たすとき，spanning tree structure に対応する spanning tree solution は最適 spanning solution となります．このような，spanning tree structure を最適 spanning tree structure と呼びます．\n$$ \\begin{aligned} c^{\\pi}_{ij} = 0 \u0026\u0026 \\forall (i, j) \\in T \\\\ c^{\\pi}_{ij} \\ge 0 \u0026\u0026 \\forall (i, j) \\in L \\\\ c^{\\pi}_{ij} \\le 0 \u0026\u0026 \\forall (i, j) \\in U \\\\ \\end{aligned} $$全域木の根のポテンシャルを 0 と固定すると $T$ に属する辺 (i, j) が $c^{\\pi}_{ij} = 0$ を満たすように各頂点のポテンシャル $\\pi$ を定めることができます．このとき，$-\\pi(i)$ は根から頂点 i への木のパスの長さとみなすことができます． 具体例として，下の図の全域木について各頂点のポテンシャルを求めていきます．頂点 0 を根とします．\n頂点 1 のポテンシャルを求めます． 辺 (i, j) の reduced cost は $c_{ij}^{\\pi} = c_{ij} - \\pi(i) + \\pi(j)$ です．全域木の辺の reduced cost は 0，辺 (0, 1) のコストは 1，頂点 0 のポテンシャルは 0 であることから，$0 = 1 - 0 + \\pi(1)$ となり，$\\pi(1) = -1$と求められます．\n頂点 2 のポテンシャルを求めます． 辺 (2, 1) のコストは 5 ，頂点 1 のポテンシャルは -1 なので，$0 = 5 - \\pi(2) + (-1)$ となり，$\\pi(2) = 4$ と求められます．\n同様の計算を行うことで，全頂点のポテンシャルを計算することができます．\n全頂点のポテンシャルを求めると，$L$ と $U$ に属する辺の reduced cost を計算することができます．すべての辺が最適性条件を満たすならば，最適 spanning tree structure と判定できます．\n3. Network Simplex 法のアルゴリズムの流れ spanning tree structure が与えられたとき，全域木の reduced cost が 0 となるように各頂点のポテンシャルを計算し，各辺の reduced cost を求めることで最適 spanning structure かどうか判定することができました． 最適 spanning tree structure でない場合， $L$ に属する $c_{ij}^{\\pi} \\lt 0$ である辺か，$U$ に属する $c_{ij}^{\\pi} \\gt 0$ である辺が 1 つ以上存在することになります． これらの辺を $T$ に追加したときを考えます．\n$L$ に属する $c^{\\pi}_{ij} \\lt 0$ である辺を $T$ に追加 $L$ に属する $c_{ij}^{\\pi} \\lt 0$ である辺 (i, j) を $T$ に追加したとします．\nこのとき，根から i，i から j，j から根をたどるパスの flow を 1 増加すると，目的関数値は $c^{\\pi}_{ij}$ 増加します．\n具体例を見てみます．下の図の全域木にコスト -8 の辺 (2, 4) を追加したとします．この辺の reduced cost は $-8 - 4 + (-3) = -15$ です．\n辺 (0, 1)，(2, 1)，(2, 4)，(3, 4)，(3, 0) の順に flow を 1 単位流すと，全体のコストの合計は，1 + (-5) + (-8) + (-5) + 2 = -15 となり，目的関数値が 15 減少する（-15 増加する）ことがわかります3．\n$U$ に属する $c^{\\pi}_{ij} \\gt 0$ である辺を $T$ に追加 $U$ に属する $c_{ij}^{\\pi} \\gt 0$ である辺 (i, j) を $T$ に追加したとします．\nこのとき，根から j， j から i，i から根をたどるパスの flow を 1 増加すると，目的関数値は $c^{\\pi}_{ij}$ 減少します．\n下の図の全域木にコスト -5 の辺 (6, 4) を追加したとします．この辺の reduced cost は $(-5) - (-11) + (-3) = 3$ です．\n辺 (3, 0)，(3, 4)，(6, 4)，(5, 6)，(3, 5)，(3, 0) の順に flow を 1 単位流すと，全体のコストの合計は，-2 + 5 + (-(-5)) + (-7) + (-6) + 2 = -3 となり，目的関数値が 3 減少することがわかります．\nまた，辺 (0, 3) に対し，頂点 0 から 頂点 3 に flow を流し，頂点 3 から頂点 0 に flow を流すと flow は打ち消し合うため，追加した辺によって生じる閉路のみを考慮すればいいこともわかります．\n以上のことから，spanning tree structure が最適でないとき，最適性条件に違反する辺を全域木に追加したことによって生じる閉路の flow を更新することで目的関数値を減少できることがわかりました．\n閉路の flow を限界まで増加させると，1 本以上の辺の flow が下限容量か上限容量に達するため，その辺を取り除くことによって新しい spanning tree solution を生成することができます．\nprimal network simplex 法は これらの処理を最適性条件を満たすまで繰り返すことで最適解を求めます．\nprimal network simplex 法の流れは以下のようになります\n初期 spanning tree structure を構築する spanning tree structure が最適性条件を満たさない間，以下を繰り返す 最適性条件に違反する辺を $U$ か $L$ から選び，全域木に追加する 閉路の flow を更新する flow が下限容量か上限容量に達した辺を閉路から 1 つ取り除き新しく全域木を作成する 次節からアルゴリズムの各段階の詳細について説明していきます．\n4. 初期 spanning tree structre の構築 初期 spanning tree structre (T, L, U) を構築します．\nまず，人工頂点 $s$ を作り，$s$ と既存の各頂点 $u$ の間に以下のように辺をはります．\n$b(u) \\ge 0$ の場合，流量 $b(u)$ の辺 $(u, s)$ を加える $b(u) \\lt 0$ の場合，流量 $-b(u)$ の辺 $(s, u)$ を加える いずれの人工辺も容量とコストは十分大きい値とします．人工辺は $T$ に，もとからある辺は $L$ に，$U$ は空とします.\nこのように作られた spanning tree structure は実行可能解です．今後はこの拡張された network 上で問題を解いていきます．人工辺のコストは十分大きいため最適解が得られたとき人工辺に flow は流れていません．\n例として下のグラフの初期 spanning tree structure を構築します．\n$b(0) = 2$，$b(3) = -2$，他の頂点の需要/供給は 0 とします．また，すべての辺の下限容量は 0 とします4．\nまず，人工頂点として，$s$ を追加します．\n$b(u) \\ge 0$ である頂点 0, 1, 2 から s に向けて辺を追加します．$b(0) = 2$ であるため，辺 (0, s)の flow は 2 とします．\ns から $b(u) \\lt 0$ である頂点 3 に向けて辺を追加します．$b(3) = -2$ であるため，辺 (s, 3)の flow は 2 とします．\n初期 spanning tree structure は以下のようになります．\n$T$ に属する辺：(0, s)，(1, s)，(2, s)，(s, 3) $L$ に属する辺：(0, 1)，(0, 2)，(1, 2)，(1, 3)，(2, 3) $U$ に属する辺：なし 5. entring arc の選択 $T$ に追加する辺（entring arc）を $U$ か $L$ から選びます．\nこのとき，以下のような最適性条件を満たさない辺（eligible arc）を選びます．また，$|c^{\\pi}_{ij}|$ を violation と呼びます．\n$$ \\begin{aligned} c^{\\pi}_{ij} \\lt 0 \u0026\u0026 \\forall (i, j) \\in L \\\\ c^{\\pi}_{ij} \\gt 0 \u0026\u0026 \\forall (i, j) \\in U \\end{aligned} $$代表的な辺の選択方法は以下の 3 つです．\nBest eligible arc pivot rule(Dantzig\u0026rsquo;s pivot rule)\nviolation の最も大きい eligible arc を entring arc とする 1 flow 単位の改善が最も大きいため，イテレーションの回数は少なくなる すべての non-tree arc を調べる必要があるため，1 回のイテレーションのコストが大きい First eligible arc pivot rule\n最初に見つけた eligible arc を entring arc とする．次のイテレーションでは，前回選択した辺の次から探索を開始する．最後の辺まで探索をしたら先頭に戻る 1 回のイテレーションのコストが小さい 1 flow 単位の改善が小さくなるので，イテレーションの回数が多くなる Block search pivot rule\n辺をブロックに分割し，ブロックの中で violation の最も大きい eligible arc を entring arc とする．ブロック内で見つからなかった場合，次のブロックを探索する すべての辺を同じブロックにしたとき，Best eligible arc pivot rule と同じ挙動になる すべての辺を違うブロックにしたとき，First eligible arc pivot rule と同じ挙動になる 6. flow の更新 全域木に辺を追加すると閉路 $W$ がちょうど 1 つできます．この閉路の flow を 1 単位増加するごとに，MCFP の目的関数値は $|c^{\\pi}_{ij}|$ 減少するため，$W$ の flow を容量制約を満たす限界まで増加します．\n閉路 $W$ の向きを次のように定めます．\n$(k, l) \\in L$ のとき，辺 (k, l) と同じ方向 $(k, l) \\in U$ のとき，辺 (k, l) と逆方向 閉路 $W$ の順辺の集合を $\\bar W$，逆辺の集合を $\\underbar W$ で表したとき，$W$ の各辺の flow の増加できる量は以下のようになります．\n$$ \\delta_{ij} = \\left\\{ \\begin{array}{ll} u_{ij} - x_{ij} \u0026 (i, j) \\in \\bar{W}\\\\ x_{ij} - l_{ij} \u0026 (i, j) \\in \\underbar{W} \\end{array} \\right. $$$\\delta = min \\lbrace \\delta_{ij} : (i, j) \\in W \\rbrace$ とし，$W$ の各辺の flow を以下のように更新します．\n$$ x_{ij} = \\left\\{ \\begin{array}{ll} x_{ij} + \\delta \u0026 (i, j) \\in \\bar{W}\\\\ x_{ij} - \\delta \u0026 (i, j) \\in \\underbar{W} \\end{array} \\right. $$具体例を見ます．すべての辺の下限は 0 とします．\n$U$ に属する辺 (6, 4) を $T$ に追加すると，辺 (6, 4)，(5, 6)，(3, 5)，(3, 4) からなる閉路ができます．\n辺 (6, 4) は $U$ に属するので，(6, 4) と逆方向である反時計回りを $W$ の向きとします．$\\bar W$ に属する辺は，(3, 4)，$\\underbar W$ に属する辺は，(6, 4)，(5, 6)，(3, 5) です．\n各辺の $\\delta_{ij}$ と $\\delta$ は以下の通りです．\n$\\delta_{64} = 6 - 0 = 6$ $\\delta_{56} = 2 - 0 = 2$ $\\delta_{35} = 4 - 0 = 4$ $\\delta_{34} = 3 - 1 = 2$ $\\delta = min \\lbrace 6, 2, 4, 2 \\rbrace = 2$ 閉路 $W$ の flow を 2 増加すると以下のようになります．\n別の例をみます． 辺 (3, 4) の flow が 3 のとき，各辺の $\\delta_{ij}$は以下のようになります．\n$\\delta_{64} = 6 - 0 = 6$ $\\delta_{56} = 2 - 0 = 2$ $\\delta_{35} = 4 - 0 = 4$ $\\delta_{34} = 3 - 3 = 0$ $\\delta = min \\lbrace 6, 2, 4, 0 \\rbrace = 0$ このように全域木に $x_{ij} = l_{ij}$ や $x_{ij} = u_{ij}$ の辺があると flow が更新できないことがあります．\n7. leaving arc の選択 閉路の flow を限界まで増加したとき 1 本以上の辺が $\\delta = \\delta_{ij}$ となります．この辺を blocking arc と呼びます．\nblocking arc を取り除く辺（leaving arc）として選びます（複数ある場合は任意の辺を選びます）．\n辺 (i, j) が $x_{ij}$ = $l_{ij}$ になったときは $L$ に，$x_{ij} = u_{ij}$ になったときは $U$ に入ります．\n閉路 $W$ の flow を更新した結果，辺 (5, 6) の flow が下限容量に，辺 (3, 4) の flow が上限容量になった場合を考えます．\n辺 (5, 6) と辺 (3, 4) のどちらかを取り除くことができます．辺 (5, 6) を取り除き $L$ に追加すると下の全域木 $T$ が得られます．\n8. ポテンシャルの更新 辺 (p, q) を削除したとき，木は 2 つの部分木に分割されます．根がある方の部分木を $T_1$，ない方の部分木を $T_2$ とします．\n木の根のポテンシャルを 0 に固定し， 辺の reduced cost が 0 になるようにポテンシャルを算出していたことを考えると，$T_1$ に含まれる頂点のポテンシャルは変化せず，$T_2$ に含まれる頂点のポテンシャルのみ変化することがわかります．\n全域木に辺 (k, l) が追加され，頂点 k が $T_1$ に，頂点 l が $T_2$ に含まれる場合を考えます．\n$T_2$ は頂点 q を根とする部分木から頂点 l を根とする部分木に変化するため，$T_2$ に属する頂点のポテンシャルを更新する必要があります．\n木のすべての頂点のポテンシャルに定数を加算しても reduced cost は保たれるため，新しい $\\pi(l)$ と現在の $\\pi(l)$ の差分 $d$ が求められれば，$T_2$ に属するすべての頂点に $d$ を加算することでポテンシャルを正しい値に更新できます．\n頂点 k のポテンシャルは変化しないことから，頂点 l の新しいポテンシャル $\\pi^{\\prime}(l)$ は $0 - c_{kl} + \\pi(k)$ となります．\nよって，頂点 l の新しいポテンシャルとの現在のポテンシャルの差は $\\pi^{\\prime}(l) - \\pi(l) = 0 - c_{kl} + \\pi(k) - \\pi(l) = -(c_{kl} - \\pi(k) + \\pi(l))$ となり，これは $-c_{kl}^{\\pi}$ です．\n以上のことから，$T_2$ に属するすべての頂点に $-c_{kl}^{\\pi}$ を加算することでポテンシャルを正しい値に更新できることがわかりました．\n頂点 l が $T_1$ に，頂点 k が $T_2$ に含まれる場合も同様の議論により，$c_{kl}^{\\pi}$ 増加することが示せます．\nまとめると，辺 (k, l)を追加したとき $T_2$ に含まれる頂点のポテンシャルは以下のように更新されます．\n頂点 k が $T_1$ に，頂点 l が $T_2$ に含まれる場合 $T_2$ に含まれる頂点のポテンシャルは $-c^{\\pi}_{kl}$ 増加 頂点 l が $T_1$ に，頂点 k が $T_2$ に含まれる場合 $T_2$ に含まれる頂点のポテンシャルは $c^{\\pi}_{kl}$ 増加 9. Strongly Feasible Spanning Tree primal network simplex 法が有限回で終了するのかを考えます．\nアルゴリズムの各イテレーションでは，全域木に辺を追加するこことで閉路を作り，この閉路の flow を更新することで目的関数値を減少させます．\n目的関数値は flow 1 単位あたり $|c^{\\pi}_{ij}|$ 減少するため，常に正の量の flow を流せるならアルゴリズムは有限回で終了します．\nしかし，節 6 の最後の例のように閉路に restricted arc があると flow が増加できないイテレーションが発生することがあります．このイテレーションを degenerate iteration といいます．\n実は primal network simplex 法は entring arc と leaving arc を任意に選ぶと degenerate iteration が無限に発生しアルゴリズムが有限回で終了しないことがあります．\nそこで，strongly feasible spanning tree という概念を導入します．\n常に strongly feasible spanning tree を維持することによって，アルゴリズムが有限回で終了することが保証できます．\nstrongly feasible spanning tree 次の条件を満たす spanning tree を strongly feasible spanning tree と呼びます．\n任意の頂点から正の量の flow を容量制約に違反することなく木に沿って根に送ることができる 下の図は strongly feasible spanning tree の例です．\nすべての頂点から頂点 0 に向かって 1 以上の flow を送ることができます．\nstrongly feasible spanning tree は flow が下限の辺のは根に向いていて，flow が上限の辺は根と反対を向いている全域木とみなすこともできます．\n下の図は strongly feasible spanning tree ではない例です．\n辺 (2, 1) の flow は上限容量であるため，頂点 2 から根に flow を送ることはできません．また，辺 (3, 4) の flow は下限容量であるため，頂点 4 から根に flow を送ることはできません．\n節 4 の「初期 spanning tree structure の構築」は strongly feasible spanning tree を構築します．次の節で leaving arc をどのように選べば strongly feasible spanning tree を維持できるのか見ていきます．\n10. Strongly Feasible Spanning Tree を保つ leaving arc の選び方 辺 (k, l) を entring arc とします．頂点 k と l の最小共通祖先を頂点 w とします．\nこのとき閉路 $W$ に沿って，頂点 w から開始して最後に見つけた blocking arc を leaving arc とすると，spanning tree は strongly feasible を維持できます．\n具体例をみます．\n$L$ に属する辺 (k, l) が追加され閉路 $W$ が生成されたとします．閉路の向きは辺 (k, l) と同じ向きです．\nこの閉路には flow を流すことができず，辺 (w, 1) と辺 (p, q) が blocking arc になります．\n頂点 w から閉路の向きに沿って探索し，最後に見つかる blocking arc は辺 (p, q) であるため，この辺を leaving arc とします．\nstrongly feasible spanning tree から上記の方法で leaving arc を選んだとき，strongly feasible spanning tree が維持されることを示します．pivot 操作の直前は strongly feasible spanning tree であるという前提を利用します．\n頂点 w から頂点 q のパスを $W_1$，頂点 p から頂点 w のパスを $W_2$ とします．\n「$W_1$」，「$W_2$」，「閉路以外の頂点」の 3 つについて，「任意の頂点から正の量の flow を容量制約に違反することなく木に沿って根に送ることができる」という条件を満たすか確認します．\n$W_1$ 内の頂点\n直前が non-degenerate pivot5 の場合 $\\delta \\gt 0$ であるため，頂点 w から$W_1$ 内の頂点に flow が送られている．$W_1$ の各頂点からは頂点 w まで $\\delta$ の flow を押し戻すことができるため条件を満たす 直前が degenerate pivot6 の場合 前提から，pivot の直前では頂点 l から頂点 w のパスで flow を送れていたため，このパス内に blocking arc は存在しない．よって $W_1$ は頂点 w と頂点 k の間にある $\\delta = 0$ であり，頂点 w から頂点 k のどの辺の flow にも変化はないため条件を満たす $W_2$ 内の頂点\nleaving arc の選び方を考えると，$W_2$ 内に blocking arc はないため条件を満たす $W$ 以外の頂点\n頂点 u から根へのパスに閉路 $W$ が含まれないとき 前提から，閉路以外の flow に変化はないため，条件を満たす 頂点 u から根へのパスに閉路 $W$ が含まれるとき u から閉路までのパスは，flow に変化がないため条件を満たす．閉路に到達したとき閉路から根まで条件を満たすので全体として条件を満たす 以上のことから，leaving arc に $W$ に沿って最後に見つけた blocking arc を選ぶことで，常に strongly feasible spanning tree を維持できることがわかりました．\n11. アルゴリズムが有限回で終了することの証明 2 つの non-degenerate pivot の間の連続する degenerate pivot が有限回であることを示します．\ndegenerate pivot が発生したとき，ノードのポテンシャルが単調減少することを示します．$n$ を頂点の数，$C$ をコストの絶対値の最大値としたとき，ノードのポテンシャルの下界は $-nC$ であるため連続する degenerate pivot は有限回で終了します．\nentring arc (k, l) が $L$ に属していた場合\n辺 (k, l) は $L$ に属し，最適性条件に違反するため，reduced cost は $c^{\\pi}_{kl} \\lt 0$ です． 全域木は常に strongly feasible spanning tree を維持していることを考えると，degenerate pivot の場合は頂点 l から頂点 w の間に blocking arc は存在しないため，新しく作成される木は頂点 l に 頂点 k がぶら下がる形になります． 頂点 k を根とする部分木のポテンシャルは $c^{\\pi}_{kl} \\lt 0$ 増加するため，ノードのポテンシャルは単調減少します entring arc (k, l) が $U$ に属していた場合\n辺 (k, l) は $U$ に属し，最適性条件に違反するため，reduced cost は $c^{\\pi}_{kl} \\gt 0$ です． 新しく作成される木は頂点 k に 頂点 l がぶら下がる形になります． 頂点 l を根とする部分木のポテンシャルは $c^{\\pi}_{kl} \\gt 0$ 減少するため，ノードのポテンシャルは単調減少します 以上のことから 2 つの non-degenerate pivot の間の連続する degenerate pivot が有限回であることがわかりました． non-degenerate pivot は目的関数値を厳密に減少させるため，アルゴリズムは有限回で終了します．\n補足 1. 最適 spanning tree solution が必ず存在することについて cycle free solution free arc のみからなる閉路を持たないような実行可能解 $x$ を cycle free solution といいます．\n下の図は cycle free solution の例です．辺の上に (流量，コスト) を示し，下限容量は 0，上限容量は無限とします．\n青色の辺 (0, 1)，(1, 3)，(3, 4) が free arc です．free arc のみからなる閉路がないため cycle free solution です．この解の目的関数値は $(2 \\times 0) + (2 \\times 1) + (2 \\times 0) = 2$ です．\n下の図は cycle free solution ではない例です．\n青色の辺 (0, 1)，(1, 2)，(1, 3)，(2, 4)，(3, 4) が free arc です．free arc のみからなる閉路があるため cycle free solution ではありません．この解の目的関数値は $(2 \\times 0) + (1 \\times 3) + (1 \\times 1) + (1 \\times -1) + (1 \\times 0) = 3$ です．\ncycle free solution でない解が与えられたとき，閉路の flow を操作することで，目的関数値が大きくならないように cycle free solution にすることができます．\nこの解の場合，時計回りに flow を 1 増加すると，辺 (2, 4)，(1, 2) の flow が 1 減り，辺(1, 3)，(3, 4) の flow が 1 増えます．結果，この解の目的関数値は $(2 \\times 0) + (0 \\times 3) + (2 \\times 1) + (0 \\times -1) + (2 \\times 0) = 2$ と 1 小さくなり，さらに cycle free solution になりました．\nこのように，cycle free でない解は閉路の flow を操作することで目的関数値が大きくならないように cycle free solution にできるため，MCFP に最適解があるとき，常に同じ目的関数値である cycle free solution を持つことがわかります．\ncycle free solution から spanning tree solution を求める cycle free solution は辺を適切に選ぶことで spanning tree solution を求めるとができます．\n下の図では，青色の辺(0, 1)，(1, 2)，(1, 3)，(3, 4) を全域木として選んでいます．\n以上のことから，MCFP に最適解があるとき，常に同じ目的関数値である最適 spanning tree solution を持つことがわかりました．\n補足 2. Spanning Tree Structure の最適性条件 spanning tree structure が次の条件を満たすとき，spanning tree structure に対応する spanning tree solution は最適 spanning solution となることを示します．\n$$ \\begin{aligned} c^{\\pi}_{ij} = 0 \u0026\u0026 \\forall (i, j) \\in T \\\\ c^{\\pi}_{ij} \\ge 0 \u0026\u0026 \\forall (i, j) \\in L \\\\ c^{\\pi}_{ij} \\le 0 \u0026\u0026 \\forall (i, j) \\in U \\\\ \\end{aligned} $$まず，$\\sum_{(i, j) \\in A} c_{ij} x_{ij}$ を最小化することは $\\sum_{(i, j) \\in A} c_{ij}^{\\pi} x_{ij}$ を最小化することと等しいことを示します．\n$z(\\pi) = \\sum_{(i, j) \\in A} c_{ij}^{\\pi} x_{ij}$ とします．$c_{ij}^{\\pi} = c_{ij} - \\pi(i) + \\pi(j)$ なので，$z(0) = \\sum_{(i, j) \\in A} c_{ij} x_{ij}$ です．\n頂点 k のポテンシャルを $0$ から $\\pi(k)$ まで増加したとします．\n$c_{ij}^{\\pi} = c_{ij} - \\pi(i) + \\pi(j)$ なので，reduced cost は頂点 k から流出する flow 1 単位あたり $\\pi(k)$ 減少し，頂点 k に流入する flow 1 単位あたり $\\pi(k)$ 増加します．よって，全体の reduced cost は $ - \\pi(k) \\times k$ からの流出量 + $\\pi(k) \\times k$ への流入量だけ変化します．\nMCFP の制約条件から，各頂点 i の流出量と流入量の関係は $\\sum_{j:(i, j) \\in A} x_{ij} - \\sum_{j:(j,i) \\in A} x_{ji} = b_i$ です．\nよって，頂点 k のポテンシャルを $\\pi(k)$ 増加すると，目的関数値は $\\pi(k)b(k)$ 減少することになります．\nすべての頂点に同様のことがいえるので，$z(0) - z(\\pi) = \\sum_{i \\in N} \\pi(i)b(i) = \\pi b$ となります．\n$\\pi b$ は定数のため，$z(\\pi)$ を最小化する flow は $z(0)$ を最小化することがわかりました．\n次に，$x^{\\ast}$ を上の最適性条件を満たす (T, L, U) に対応する解としたとき，これが最適解であることを示します．\n最適性条件を満たすポテンシャルを $\\pi$ としたとき，$\\sum_{(i, j) \\in A} c_{ij}^{\\pi} x_{ij}$ の最小化を考えます．\n$\\sum_{(i, j) \\in A} c_{ij}^{\\pi} x_{ij}$ を最小化することは $\\sum_{(i, j) \\in L} c_{ij}^{\\pi} x_{ij} - \\sum_{(i, j) \\in U} |c_{ij}^{\\pi}| x_{ij}$ を最小化すること等しいです．\n$\\forall (i, j) \\in L$ に対して $x_{ij} \\ge x_{ij}^{\\ast} = l_{ij}$ であり，$\\forall (i, j) \\in U$ に対して $x_{ij} \\le x_{ij}^{\\ast} = u_{ij}$ であるため，$x^{\\ast}$ の目的関数値は $x$ の目的関数値以下となります．\n以上のことから，最適性条件を満たす spanning tree structure は最適解となることがわかりました．\n参考 Network Flows: Pearson New International Edition The network simplex algorithm IE 411: Graphs and Network Flows (Python) 正確には，実行可能領域に下界が存在するならば最適 spanning tree solution が少なくとも 1 つ存在します．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n全域木の辺として restricted arc を選ぶこともできます\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n辺 (i, j) に対し頂点 j から頂点 i に flow を流すと，辺 (i, j) の flow を減らすことになります．例えば，辺 (2, 1) に対して頂点 1 から頂点 2 に flow を流すと，辺 (2, 1) の flow は 1 減り，コストは 5 下がります．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n辺の lower が 0 でない場合，先に lower 分の flow を流しておきます．\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n$\\delta \\gt 0$ である pivot\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n$\\delta = 0$ である pivot\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-09-11T00:00:00+09:00","image":"https://miti-7.github.io/post/%E6%9C%80%E5%B0%8F%E8%B2%BB%E7%94%A8%E6%B5%81%E5%95%8F%E9%A1%8C%E3%81%AE-primal-network-simplex-%E6%B3%95/images/%E3%83%9D%E3%83%86%E3%83%B3%E3%82%B7%E3%83%A3%E3%83%AB%E3%81%AE%E6%9B%B4%E6%96%B0_hu3317282469700964715.png","permalink":"https://miti-7.github.io/post/%E6%9C%80%E5%B0%8F%E8%B2%BB%E7%94%A8%E6%B5%81%E5%95%8F%E9%A1%8C%E3%81%AE-primal-network-simplex-%E6%B3%95/","title":"最小費用流問題の Primal Network Simplex 法"},{"content":"1. はじめに Green Hackenbush は以下のルールをもつ有限型不偏ゲームです．\n点線で表された地面，点，点と点を結ぶ有限個の辺からなる図形がある どの図形のどの部分も辺をたどると地面につながる 2 人のプレーヤーは交互に図形から 1 つの辺を選んで取り除く．選んだ辺を取り除くことで地面とつながらなくなってしまう部分は辺と同時に取り除かれる 最後の辺をとったプレーヤーの勝ち Green Hackenbush は有限型不偏ゲームなので各図形のグランディ数を求めることができます．今回は木と呼ばれる図形のグランディ数を求めていきます．\n節 2 と 節 3 では Green Hackenbush で一般に適用できる性質を確認します．節 4 と 節 5 ではこの性質を利用し具体的な図形のグランディ数を求める方法を示します．\n最後に節 6 で Green Hackenbush の木のグランディ数を求める問題を紹介します．\n2. 地面の点の移動 地面上にある点を移動してもゲームのグランディ数は変わらないので，自由に移動させることができます．\n3. コロン原理(Colon Principle) コロン原理\n図形 A のグランディ数を $g(A)$ とする．地面についている図形 $G$ と宙に浮いている図形 $H$ が 1 つの点 $a$ のみを共有してできる図形を $H \\cup_a G$ と表す．このとき，宙に浮いている図形 $H$，$K$ が $g(H) = g(K)$ を満たすならば，$g(H \\cup_a G) = g(K \\cup_a G)$ となる．\n証明\r$g(H \\cup_a G) = g(K \\cup_a G)$ ということは，$g(H \\cup_a G) \\ xor \\ g(K \\cup_a G) = 0$ なので，$H \\cup_a G と K \\cup_a G$ の直和ゲームは後手必勝と言い換えることができます．よって，「$g(H) = g(K)$ を満たすならば後手必勝」を示します． また，$H \\cup_a G$ と $K \\cup_a G$ は対称なので，$H \\cup_a G$ から辺を取り除く場合のみ考えます．\n先手の手は，「1. $G$ から辺を取り除く」，「2. $H$ から辺を取り除く」の 2 通りです．先手の各手について後手の必勝手を考えます． グランディ数の定義より，グランディ数 g の局面からはグランディ数 g 未満の局面に遷移できることを利用します．\n先手が $H \\cup_a G$ の $G$ から辺を取り除く場合\n後手は $K \\cup_a G$ の $G$ から同じ辺を取り除けばいい 先手が $H ∪_a G$ の $H$ から辺を取り除き，$H^\\prime $ にした場合\n$g(H^\\prime) \u0026lt; g(H)$ の場合\n仮定より $g(H) = g(K)$ なので，$K$ から辺を取り除いて移行できる $K^\\prime$ で，$g(K^\\prime) = g(H^\\prime)$ となるものがある．後手は $K → K^\\prime$ となる辺を取り除けばいい． $g(H^\\prime) \u0026gt; g(H)$ の場合\n$H^\\prime$ から辺を取り除いて移行できる $H^{\\prime \\prime}$ で， $g(H^{\\prime \\prime}) = g(H) = g(K)$ となるものがある．後手は $H^\\prime → H^{\\prime \\prime}$ となる辺を取り除けばいい． コロン原理を使うことで，ある 1 つの点のみを共有している宙に浮いている図形は，同じグランディ数を持つより単純な図形に置き換えることができます．\n4. 棒のグランディ数 まず，1 つの棒のみからなるゲームのグランディ数について考えます．\n長さ m の棒からは，長さ m 未満の棒に遷移できるため，長さ m の棒のグランディ数は m となります．\n次に，複数の棒からなるゲームのグランディ数を考えます．\n各棒は独立したゲームの局面とみなすことができるので，複数の棒からなるゲームのグランディ数は各棒のグランディ数の xor で求めることができます．\n例えば，長さ 1, 1, 2 の棒からなるゲームのグランディ数は $1 \\ xor \\ 1 \\ xor \\ 2 = 2$ となります．\n最後に，地面のある一点から複数の棒が伸びる図形のグランディ数を考えます．\n地面の点は自由に移動することができるため，地面のある一点から複数の棒が伸びる図形は，複数の棒からなるゲームに帰着することができます．\nよって，地面のある一点から複数の棒が伸びる図形のグランディ数は，各棒の長さの xor で求めることができます．\n5. 木のグランディ数 コロン原理を順次適用していくことによって，木のグランディ数を求めることができます．\n地面のある一点から複数の棒が伸びている図形のグランディ数は，各棒の長さの xor で求めることができました．コロン原理により，ある一点から複数の棒が伸びているような木の点は，各棒の長さの xor をとった値の長さの棒に変換することができます．この操作を繰り返すことで木のグランディ数を求めることができます．\n以下に例を示します．\n点 a からは，長さ 1 の棒と長さ 3 の棒が伸びています．よって，長さ 1 xor 3 = 2 の棒に置き換えることができます．\n点 b からは，長さ 1 の棒と長さ 3 の棒が伸びています．よって，長さ 1 xor 3 = 2 の棒に置き換えることができます．\n点 c からは，長さ 2 の棒と長さ 3 の棒と長さ 1 の棒が伸びています．よって，長さ 2 xor 3 xor 1 = 0 の棒に置き換えることができます．\n以上のことからこの木のグランディ数は 0 と求めることができました．\n6. AGC017 D - Game on Tree Green Hackenbush の木のグランディ数を求める問題として，D - Game on Tree があります．\nある頂点のグランディ数は，「自分の子のグランディ数 + 1」 の xor を使って求めことができるので，根から深さ優先探索をすることで木のグランディ数を求めることができます．\n提出コード\n参考 石取りゲームの数学 Hackenbush ","date":"2024-09-10T00:00:00+09:00","image":"https://miti-7.github.io/post/green-hackenbush-%E3%81%AE%E6%9C%A8%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%87%E3%82%A3%E6%95%B0/images/%E3%82%B3%E3%83%AD%E3%83%B3%E5%8E%9F%E7%90%86%E3%81%AE%E4%BE%8B_hu7133655678153185319.png","permalink":"https://miti-7.github.io/post/green-hackenbush-%E3%81%AE%E6%9C%A8%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%87%E3%82%A3%E6%95%B0/","title":"Green Hackenbush の木のグランディ数"}]